name: Upsert Infrastructure

on:
  workflow_dispatch: # Manual trigger
  schedule:
  - cron: '0 1 * * 1' # 1AM (UTC) every monday -- this run will clean up potential old policies
  # push:
  #   branches: [prod, dev]
  # pull_request:
  #   branches: [prod, dev]
  
concurrency: 
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

env:
  TARGET_BRANCH: ${{ github.event_name == 'pull_request' && github.base_ref || github.ref_name }}
  AWS_ACCOUNT_ID: ${{ vars.AWS_ACCOUNT_ID }}
  TF_VAR_region: eu-north-1
  TF_VAR_organization: carlssonk
  TF_VAR_cloudflare_api_token: ${{ secrets.CLOUDFLARE_API_TOKEN }}
  TF_VAR_cleanup_policies: ${{ github.event_name == 'schedule' }}

jobs:
  check_run:
    name: Should run condition
    runs-on: ubuntu-latest
    outputs:
      should_run: ${{ steps.check.outputs.should_run }}
    steps:
      - id: check
        run: |
          if [[ "${{ github.event_name }}" == "push" && "${{ !contains(github.event.head_commit.message, '[DESTROY]') }}" == "true" ]]; then
            echo "should_run=true" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event_name }}" == "workflow_dispatch" || "${{ github.event_name }}" == "pull_request" ]]; then
            echo "should_run=true" >> $GITHUB_OUTPUT
          else
            echo "should_run=false" >> $GITHUB_OUTPUT
          fi

  terraform_operation:
    name: Terraform Operation
    needs: check_run
    if: needs.check_run.outputs.should_run == 'true'
    runs-on: ubuntu-latest
    environment: ${{ github.event_name == 'pull_request' && github.base_ref || github.ref_name }}
    permissions:
      id-token: write
      contents: read
      pull-requests: write
    strategy:
      matrix:
        step: [iam, resources]
      fail-fast: true
      max-parallel: 1
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS Credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/terraform-execution-role
          aws-region: ${{ env.TF_VAR_region }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform Init
        run: |
          terraform init \
            -backend-config="encrypt=true" \
            -backend-config="region=${{ env.TF_VAR_region }}" \
            -backend-config="bucket=${{ env.TF_VAR_organization }}-terraform-state-bucket-${{ env.TARGET_BRANCH }}" \
            -backend-config="dynamodb_table=${{ env.TF_VAR_organization }}-terraform-lock-table-${{ env.TARGET_BRANCH }}" \
            -backend-config="key=${{ matrix.step }}/terraform.tfstate"

      - name: Check for State Removal Command
        if: matrix.step == 'resources'
        id: check_commit
        run: |
          commit_message=$(git log -1 --pretty=%B)
          if echo "$commit_message" | grep -q "^tf-rm:"; then
            echo "remove_resource=true" >> $GITHUB_OUTPUT
            echo "resource_address=$(echo "$commit_message" | sed -n 's/^tf-rm: *//p')" >> $GITHUB_OUTPUT
          else
            echo "remove_resource=false" >> $GITHUB_OUTPUT
          fi

      - name: Remove Resource from Terraform State
        if: matrix.step == 'resources' && steps.check_commit.outputs.remove_resource == 'true'
        run: |
          terraform state rm '${{ steps.check_commit.outputs.resource_address }}'
        continue-on-error: true

      - name: Prepare Environment
        run: |
          python create_globals.py '${{ toJson(env) }}' workflow_step=${{ matrix.step }}
          cat globals.json
          terraform workspace select ${{ env.TARGET_BRANCH }} || terraform workspace new ${{ env.TARGET_BRANCH }}
          chmod +x retry_command.sh

      - name: ${{ (github.event_name == 'pull_request' && format('{0} - Terraform Plan', matrix.step)) || format('{0} - Terraform Apply', matrix.step) }}
        run: |
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            terraform plan ${{ matrix.step == 'iam' && '-lock=false' || '' }}
          else
            if ! ./retry_command.sh "terraform apply ${{ matrix.step == 'iam' && '-lock=false' || '' }} -auto-approve"; then
              echo "Terraform failed after all retry attempts"
              exit 1
            fi
          fi