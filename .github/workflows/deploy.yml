name: Upsert Infrastructure

on:
  workflow_dispatch: # Manual trigger
  schedule:
  - cron: '0 1 * * 1' # 1AM (UTC) every monday -- this run will clean up potential old policies
  push:
    branches: [prod, dev]
  pull_request:
    branches: [prod, dev]
  
concurrency: 
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

env:
  TARGET_BRANCH: ${{ github.event_name == 'pull_request' && github.base_ref || github.ref_name }}
  AWS_ACCOUNT_ID: ${{ vars.AWS_ACCOUNT_ID }}
  TF_VAR_region: eu-north-1
  TF_VAR_organization: carlssonk
  TF_VAR_cloudflare_api_token: ${{ secrets.CLOUDFLARE_API_TOKEN }}
  TF_VAR_cleanup_policies: ${{ github.event_name == 'schedule' }}

jobs:
  check_run:
    name: Should run condition
    runs-on: ubuntu-latest
    outputs:
      should_run: ${{ steps.check.outputs.should_run }}
    steps:
      - id: check
        run: |
          if [[ "${{ github.event_name }}" == "push" && "${{ !contains(github.event.head_commit.message, '[DESTROY]') }}" == "true" ]]; then
            echo "should_run=true" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event_name }}" == "workflow_dispatch" || "${{ github.event_name }}" == "pull_request" ]]; then
            echo "should_run=true" >> $GITHUB_OUTPUT
          else
            echo "should_run=false" >> $GITHUB_OUTPUT
          fi

  deploy:
    name: Deploy
    needs: check_run
    if: needs.check_run.outputs.should_run == 'true'
    runs-on: ubuntu-latest
    environment: ${{ github.event_name == 'pull_request' && github.base_ref || github.ref_name }}
    permissions:
      id-token: write
      contents: read
      pull-requests: write

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS Credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/terraform-execution-role
          aws-region: ${{ env.TF_VAR_region }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: ${{ (github.event_name == 'pull_request' && 'Plan IAM') || 'Apply IAM' }}
        env:
          TF_VAR_workflow_step: iam
        run: |          
          terraform init \
            -backend-config="encrypt=true" \
            -backend-config="region=${{ env.TF_VAR_region }}" \
            -backend-config="bucket=${{ env.TF_VAR_organization }}-terraform-state-bucket-${{ env.TARGET_BRANCH }}" \
            -backend-config="dynamodb_table=${{ env.TF_VAR_organization }}-terraform-lock-table-${{ env.TARGET_BRANCH }}" \
            -backend-config="key=iam/terraform.tfstate"
          
          python create_globals.py '${{ toJson(env) }}' workflow_step=iam aws_account_id=$(echo ${{ env.AWS_ACCOUNT_ID }} | sed 's/./& /g')
          cat globals.json
          terraform workspace select ${{ env.TARGET_BRANCH }} || terraform workspace new ${{ env.TARGET_BRANCH }}
          chmod +x retry_command.sh
          
          if [ github.event_name == 'pull_request' ]; then
            terraform plan -lock=false
          else
            if ! ./retry_command.sh "terraform apply -lock=false -auto-approve"; then
              echo "Terraform failed after all retry attempts"
              exit 1
            fi
          fi

      - name: ${{ (github.event_name == 'pull_request' && 'Plan Resources') || 'Apply Resources' }}
        env:
          TF_VAR_workflow_step: resources
        run: |          
          terraform init -reconfigure \
            -backend-config="encrypt=true" \
            -backend-config="region=${{ env.TF_VAR_region }}" \
            -backend-config="bucket=${{ env.TF_VAR_organization }}-terraform-state-bucket-${{ env.TARGET_BRANCH }}" \
            -backend-config="dynamodb_table=${{ env.TF_VAR_organization }}-terraform-lock-table-${{ env.TARGET_BRANCH }}" \
            -backend-config="key=resources/terraform.tfstate"
          
          python create_globals.py '${{ toJson(env) }}' workflow_step=resources aws_account_id=$(echo ${{ env.AWS_ACCOUNT_ID }} | sed 's/./& /g')
          terraform workspace select ${{ env.TARGET_BRANCH }} || terraform workspace new ${{ env.TARGET_BRANCH }}
          chmod +x retry_command.sh
          
          if [ github.event_name == 'pull_request' ]; then
            terraform plan
          else
            if ! ./retry_command.sh "terraform apply -auto-approve"; then
              echo "Terraform failed after all retry attempts"
              exit 1
            fi
          fi
