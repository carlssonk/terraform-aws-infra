name: Upsert Infrastructure

on:
  push:
    branches: [prod, dev]

env:
  WORKSPACE: ${{ github.ref_name }}
  TF_VAR_region: eu-north-1
  TF_VAR_organization: carlssonk
  AWS_ACCOUNT_ID: ${{ vars.AWS_ACCOUNT_ID }}

jobs:
  check_deploy_condition:
    name: Should Deploy Condition
    runs-on: ubuntu-latest
    outputs:
      should_deploy: ${{ steps.check.outputs.should_deploy }}
    steps:
      - id: check
        run: |
          if [[ "${{ github.event_name }}" == "push" && "${{ !contains(github.event.head_commit.message, '[DESTROY]') }}" == "true" ]]; then
            echo "should_deploy=true" >> $GITHUB_OUTPUT
          else
            echo "should_deploy=false" >> $GITHUB_OUTPUT
          fi

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    if: needs.check_deploy_condition.outputs.should_deploy == 'true'
    environment: ${{ github.ref_name }}
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS Credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/terraform-execution-role
          aws-region: ${{ env.TF_VAR_region }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Run Terraform for IAM and Resources
        run: |
          for step in iam resources; do
            echo "Running Terraform for $step"
            
            terraform init -reconfigure \
              -backend-config="encrypt=true" \
              -backend-config="region=${{ env.TF_VAR_region }}" \
              -backend-config="bucket=${{ env.TF_VAR_organization }}-terraform-state-bucket-${{ env.WORKSPACE }}" \
              -backend-config="dynamodb_table=${{ env.TF_VAR_organization }}-terraform-lock-table-${{ env.WORKSPACE }}" \
              -backend-config="key=${step}/terraform.tfstate"
            
            terraform workspace select ${{ env.WORKSPACE }} || terraform workspace new ${{ env.WORKSPACE }}
            
            python create_globals.py '${{ toJson(env) }}' workflow_step=$step
            
            chmod +x retry_command.sh
            if ! ./retry_command.sh "terraform apply -auto-approve"; then
              echo "Terraform apply failed after all retry attempts"
              exit 1
            fi
          done