name: Destroy Infrastructure

on:
  workflow_dispatch:
    inputs:
      environment:
        type: choice
        description: "Choose a environment to destroy"
        required: true
        options:
          - dev
          - staging
          - prod
      confirm_destroy:
        description: 'Type "DESTROY" to confirm infrastructure destruction'
        required: true
  
concurrency: 
  group: ${{ github.event.inputs.environment }} # Prevent concurrent runs
  cancel-in-progress: false

env:
  TF_VAR_cloudflare_api_token: ${{ secrets.CLOUDFLARE_API_TOKEN }}
  TF_VAR_organization: ${{ vars.ORGANIZATION }}

jobs:
  terraform-operation:
    name: Terraform Operation
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    permissions:
      id-token: write
      contents: write
      pull-requests: write
    strategy:
      matrix:
        step: [resources, iam]
      fail-fast: true
      max-parallel: 1
    env:
      TF_ROOT_DIRECTORY: ./environments/${{ (github.event.inputs.environment == 'staging' || github.event.inputs.environment == 'prod') && 'staging-and-prod' || 'dev' }}
      TFVARS_FILE_NAME: ${{ github.event.inputs.environment == 'dev' && 'terraform' || github.event.inputs.environment }}
    steps:
      - name: Set TF_VAR_workflow_step
        run: echo "TF_VAR_workflow_step=${{ matrix.step }}" >> $GITHUB_ENV

      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS Credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ vars.AWS_ACCOUNT_ID }}:role/terraform-execution-role
          aws-region: ${{ vars.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Set modules
        run: |
          chmod +x ./scripts/ci_set_modules.sh
          ./scripts/ci_set_modules.sh ${{ matrix.step }}

      - name: Terraform Init
        run: |
          terraform init \
            -input=false \
            -backend-config="encrypt=true" \
            -backend-config="region=${{ vars.AWS_REGION }}" \
            -backend-config="bucket=${{ vars.ORGANIZATION }}-terraform-state-bucket-${{ github.event.inputs.environment }}" \
            -backend-config="dynamodb_table=${{ vars.ORGANIZATION }}-terraform-lock-table-${{ github.event.inputs.environment }}" \
            -backend-config="key=${{ matrix.step }}/terraform.tfstate"
        working-directory: ${{ env.TF_ROOT_DIRECTORY }}

      - name: Prepare Environment
        run: |
          python ./scripts/ci_create_globals.py \
            workflow_step=${{ env.TF_VAR_workflow_step }} \
            organization=${{ env.TF_VAR_organization }} \
            cleanup_policies=true

          terraform workspace select ${{ github.event.inputs.environment }} || terraform workspace new ${{ github.event.inputs.environment }}
          chmod +x ./scripts/ci_retry_command.sh

      - name: Terraform Destroy
        run: |
          if ! ../../scripts/ci_retry_command.sh "terraform destroy -lock=false -auto-approve -var-file='${{ env.TFVARS_FILE_NAME }}.tfvars'"; then
            echo "Terraform failed after all retry attempts"
            exit 1
          fi
        working-directory: ${{ env.TF_ROOT_DIRECTORY }}

      - name: Update Terraform State File
        id: set-tf-state
        if: matrix.step == 'resources' && github.event_name != 'workflow_dispatch'
        env:
          branch_name: terraform-state
        run: |
          git config --local user.name github-actions
          git config --local user.email github-actions@github.com

          git stash
          terraform show -json | sed -n '2p' > terraform_state.json
          
          if git ls-remote --exit-code --heads origin ${{ env.branch_name }} >/dev/null 2>&1; then
            git fetch --all
            git checkout ${{ env.branch_name }}
          else
            git checkout --orphan ${{ env.branch_name }}
            git reset --hard
          fi

          mv terraform_state.json ../../
          git add ../../terraform_state.json

          git diff --staged --quiet || (git commit -m "Updated by github-actions" && git push -u origin ${{ env.branch_name }})
        working-directory: ${{ env.TF_ROOT_DIRECTORY }}

  create-release-tag:
    name: Create Release Tag
    needs: [terraform-operation]
    if: github.event.inputs.environment == 'prod'
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
          
      - name: Create and push tag if not exists
        id: create_tag
        run: |
          git config --local user.name github-actions
          git config --local user.email github-actions@github.com
          COMMIT_HASH=$(git rev-parse --short HEAD)
          TAG_NAME="${COMMIT_HASH}"

          if git ls-remote --exit-code --tags origin "refs/tags/$TAG_NAME" >/dev/null 2>&1; then
            echo "Tag $TAG_NAME already exists. Skipping tag creation."
          else
            git tag $TAG_NAME
            git push origin $TAG_NAME || true
            echo "TAG_NAME=$TAG_NAME" >> $GITHUB_OUTPUT
            echo "Tag $TAG_NAME created and pushed."
          fi

      - name: Create Release
        if: steps.create_tag.outputs.TAG_NAME != ''
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.create_tag.outputs.TAG_NAME }}
          release_name: Release ${{ steps.create_tag.outputs.TAG_NAME }}
          draft: false
          prerelease: false
          body: |
            Automated release for tag ${{ steps.create_tag.outputs.TAG_NAME }}
            
            Commit: ${{ github.sha }}