name: Destroy Infrastructure

on:
  push:
    branches: [prod, dev]
  workflow_dispatch:
    inputs:
      confirm_destroy:
        description: 'Type "DESTROY" to confirm infrastructure destruction'
        required: true

concurrency: 
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

env:
  TARGET_BRANCH: ${{ github.ref_name }}
  AWS_ACCOUNT_ID: ${{ vars.AWS_ACCOUNT_ID }}
  TF_VAR_region: eu-north-1
  TF_VAR_organization: carlssonk
  TF_VAR_cloudflare_api_token: ${{ secrets.CLOUDFLARE_API_TOKEN }}
  TF_VAR_cleanup_policies: true

jobs:
  check_destroy_condition:
    name: Should Destroy Condition
    runs-on: ubuntu-latest
    outputs:
      should_destroy: ${{ steps.check.outputs.should_destroy }}
    steps:
      - id: check
        run: |
          if [[ "${{ github.event_name }}" == "push" && "${{ contains(github.event.head_commit.message, '[DESTROY]') }}" == "true" ]]; then
            echo "should_destroy=true" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event_name }}" == "workflow_dispatch" && "${{ github.event.inputs.confirm_destroy }}" == "DESTROY" ]]; then
            echo "should_destroy=true" >> $GITHUB_OUTPUT
          else
            echo "should_destroy=false" >> $GITHUB_OUTPUT
          fi

  destroy:
    name: Destroy
    needs: check_destroy_condition
    if: needs.check_destroy_condition.outputs.should_destroy == 'true'
    runs-on: ubuntu-latest

    environment: ${{ github.ref_name }}
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS Credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/terraform-execution-role
          aws-region: ${{ env.TF_VAR_region }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Destroy resources
        env:
          TF_VAR_workflow_step: resources
        run: |          
          terraform init \
            -backend-config="encrypt=true" \
            -backend-config="region=${{ env.TF_VAR_region }}" \
            -backend-config="bucket=${{ env.TF_VAR_organization }}-terraform-state-bucket-${{ env.TARGET_BRANCH }}" \
            -backend-config="dynamodb_table=${{ env.TF_VAR_organization }}-terraform-lock-table-${{ env.TARGET_BRANCH }}" \
            -backend-config="key=resources/terraform.tfstate"
          
          python create_globals.py '${{ toJson(env) }}' workflow_step=resources
          terraform workspace select ${{ env.TARGET_BRANCH }} || terraform workspace new ${{ env.TARGET_BRANCH }}
          chmod +x retry_command.sh
          
          if ! ./retry_command.sh "terraform destroy -auto-approve"; then
            echo "Terraform failed after all retry attempts"
            exit 1
          fi

      - name: Destroy IAM
        env:
          TF_VAR_workflow_step: iam
        run: |          
          terraform init -reconfigure \
            -backend-config="encrypt=true" \
            -backend-config="region=${{ env.TF_VAR_region }}" \
            -backend-config="bucket=${{ env.TF_VAR_organization }}-terraform-state-bucket-${{ env.TARGET_BRANCH }}" \
            -backend-config="dynamodb_table=${{ env.TF_VAR_organization }}-terraform-lock-table-${{ env.TARGET_BRANCH }}" \
            -backend-config="key=iam/terraform.tfstate"
          
          python create_globals.py '${{ toJson(env) }}' workflow_step=iam
          terraform workspace select ${{ env.TARGET_BRANCH }} || terraform workspace new ${{ env.TARGET_BRANCH }}
          chmod +x retry_command.sh
          
          if ! ./retry_command.sh "terraform destroy -lock=false -auto-approve"; then
            echo "Terraform failed after all retry attempts"
            exit 1
          fi
