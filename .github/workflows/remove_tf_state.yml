name: Remove Terraform State

on:
  workflow_dispatch:
    inputs:
      environment:
        type: choice
        description: "Choose environment"
        required: true
        options:
          - dev
          - staging
          - prod
      state_bucket:
        type: choice
        description: "Workflow type/state bucket"
        required: true
        options:
          - resources
          - iam
      tf-rm:
        description: 'Terraform resource path to remove'
        required: true
  
concurrency: 
  group: ${{ github.event.inputs.environment }} # Prevent concurrent runs
  cancel-in-progress: false

env:
  TF_VAR_cloudflare_api_token: ${{ secrets.CLOUDFLARE_API_TOKEN }}
  TF_VAR_workflow_step: ${{ github.event.inputs.state_bucket }}

jobs:
  terraform-operation:
    name: Terraform Operation
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    permissions:
      id-token: write
      contents: read
    env:
      TF_ROOT_DIRECTORY: ./environments/${{ (github.event.inputs.environment == 'staging' || github.event.inputs.environment == 'prod') && 'staging-and-prod' || 'dev' }}
      TFVARS_FILE_NAME: ${{ github.event.inputs.environment == 'dev' && 'terraform' || github.event.inputs.environment }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS Credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ vars.AWS_ACCOUNT_ID }}:role/terraform-execution-role
          aws-region: ${{ vars.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Symlink modules
        run: |
          chmod +x ./scripts/symlink_modules.sh
          ./scripts/symlink_modules.sh ${{ env.TF_VAR_workflow_step }} true

      - name: Terraform Init
        run: |
          terraform init \
            -input=false \
            -backend-config="encrypt=true" \
            -backend-config="region=${{ vars.AWS_REGION }}" \
            -backend-config="bucket=${{ vars.ORGANIZATION }}-terraform-state-bucket-${{ github.event.inputs.environment }}" \
            -backend-config="dynamodb_table=${{ vars.ORGANIZATION }}-terraform-lock-table-${{ github.event.inputs.environment }}" \
            -backend-config="key=${{ env.TF_VAR_workflow_step }}/terraform.tfstate"
        working-directory: ${{ env.TF_ROOT_DIRECTORY }}

      - name: Prepare Environment
        run: |
          python ./scripts/create_globals.py \
            "${{ env.TF_ROOT_DIRECTORY }}/${{ env.TFVARS_FILE_NAME }}.tfvars" \
            workflow_step=${{ env.TF_VAR_workflow_step }} \
            cleanup_policies=true

          terraform workspace new ${{ github.event.inputs.environment }}
          chmod +x ./scripts/retry_command.sh

      - name: Check and Remove Resource from Terraform State
        run: |
          echo "Removing resource: ${{ inputs.tf-rm }}"
          terraform state rm '${{ inputs.tf-rm }}'
        working-directory: ${{ env.TF_ROOT_DIRECTORY }}